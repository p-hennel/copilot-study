# Docker Compose Configuration for Socket Communication System
#
# This file provides a complete containerized setup for the socket communication
# system including the web application, database, and optional monitoring services.

version: '3.8'

services:
  # ============================================================================
  # WEB APPLICATION WITH SOCKET SERVER
  # ============================================================================
  copilot-study:
    build:
      context: ../../../../..  # Build from project root
      dockerfile: Dockerfile
      target: production
    container_name: copilot-study-app
    restart: unless-stopped
    environment:
      # Node.js configuration
      NODE_ENV: production
      PORT: 3000
      
      # Database connection
      DATABASE_URL: postgresql://copilot_user:${POSTGRES_PASSWORD}@postgres:5432/copilot_study
      
      # Socket configuration
      SOCKET_PATH: /var/run/copilot-study/crawler.sock
      SOCKET_MAX_CONNECTIONS: 20
      SOCKET_LOG_LEVEL: info
      SOCKET_ENABLE_METRICS: true
      SOCKET_HEARTBEAT_INTERVAL: 60000
      SOCKET_MAX_CONCURRENT_JOBS: 10
      
      # Database pool settings
      DATABASE_CONNECTION_POOL: 25
      SOCKET_QUERY_TIMEOUT: 45000
      
      # Security
      SOCKET_RATE_LIMIT: 100
      SOCKET_MAX_MESSAGE_SIZE: 5242880
      
      # Monitoring
      SOCKET_ENABLE_PROMETHEUS: true
      SOCKET_HEALTH_CHECK_PATH: /health/socket
    ports:
      - "3000:3000"
      - "9090:9090"  # Prometheus metrics
    volumes:
      # Socket directory (shared with crawler containers)
      - socket_volume:/var/run/copilot-study
      # Persistent storage for logs and data
      - app_logs:/var/log/copilot-study
      - app_data:/var/lib/copilot-study
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - copilot_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health/socket"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # ============================================================================
  # DATABASE
  # ============================================================================
  postgres:
    image: postgres:15-alpine
    container_name: copilot-study-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: copilot_study
      POSTGRES_USER: copilot_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - copilot_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U copilot_user -d copilot_study"]
      interval: 10s
      timeout: 5s
      retries: 5

  # ============================================================================
  # REDIS (Optional - for session management and caching)
  # ============================================================================
  redis:
    image: redis:7-alpine
    container_name: copilot-study-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    networks:
      - copilot_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # ============================================================================
  # NGINX REVERSE PROXY (Optional)
  # ============================================================================
  nginx:
    image: nginx:alpine
    container_name: copilot-study-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - copilot-study
    networks:
      - copilot_network
    profiles:
      - with-proxy

  # ============================================================================
  # MONITORING SERVICES (Optional)
  # ============================================================================
  
  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: copilot-study-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9091:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - copilot_network
    profiles:
      - monitoring

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: copilot-study-grafana
    restart: unless-stopped
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD}
      GF_USERS_ALLOW_SIGN_UP: false
    ports:
      - "3001:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - copilot_network
    profiles:
      - monitoring

  # Log aggregation (Optional)
  loki:
    image: grafana/loki:latest
    container_name: copilot-study-loki
    restart: unless-stopped
    ports:
      - "3100:3100"
    volumes:
      - ./monitoring/loki.yml:/etc/loki/local-config.yaml:ro
      - loki_data:/loki
    networks:
      - copilot_network
    profiles:
      - logging

  # Log shipping
  promtail:
    image: grafana/promtail:latest
    container_name: copilot-study-promtail
    restart: unless-stopped
    volumes:
      - ./monitoring/promtail.yml:/etc/promtail/config.yml:ro
      - app_logs:/var/log/copilot-study:ro
      - nginx_logs:/var/log/nginx:ro
    depends_on:
      - loki
    networks:
      - copilot_network
    profiles:
      - logging

# ============================================================================
# VOLUMES
# ============================================================================
volumes:
  # Application data
  socket_volume:
    driver: local
  app_logs:
    driver: local
  app_data:
    driver: local
  
  # Database data
  postgres_data:
    driver: local
  redis_data:
    driver: local
  
  # Monitoring data
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  loki_data:
    driver: local
  
  # Nginx logs
  nginx_logs:
    driver: local

# ============================================================================
# NETWORKS
# ============================================================================
networks:
  copilot_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ============================================================================
# USAGE EXAMPLES
# ============================================================================

# Basic setup (app + database):
# docker-compose up -d

# With reverse proxy:
# docker-compose --profile with-proxy up -d

# With monitoring:
# docker-compose --profile monitoring up -d

# With logging:
# docker-compose --profile logging up -d

# Full setup with all services:
# docker-compose --profile with-proxy --profile monitoring --profile logging up -d

# Development mode with file watching:
# docker-compose -f docker-compose.yml -f docker-compose.dev.yml up

# View logs:
# docker-compose logs -f copilot-study

# Scale application (if using load balancer):
# docker-compose up -d --scale copilot-study=3

# Update and restart services:
# docker-compose pull && docker-compose up -d

# Backup data:
# docker-compose exec postgres pg_dump -U copilot_user copilot_study > backup.sql

# ============================================================================
# ENVIRONMENT VARIABLES
# ============================================================================

# Required environment variables (create .env file):
# POSTGRES_PASSWORD=your_secure_postgres_password
# REDIS_PASSWORD=your_secure_redis_password
# GRAFANA_PASSWORD=your_secure_grafana_password

# Optional environment variables:
# POSTGRES_PORT=5432
# REDIS_PORT=6379
# APP_PORT=3000
# DOMAIN=copilot-study.example.com

# ============================================================================
# SECURITY NOTES
# ============================================================================

# 1. Change all default passwords in production
# 2. Use secrets management for sensitive data
# 3. Configure proper firewall rules
# 4. Enable SSL/TLS for all external connections
# 5. Regular security updates for all images
# 6. Monitor container security with tools like Falco
# 7. Use non-root users in containers where possible
# 8. Scan images for vulnerabilities before deployment